

#include <cstdlib>
#include <iostream>
#include "ActMokaiInfo.h"
#include "ColorParse.h"
#include "ReleaseInfo.h"

using namespace std;


void showSynopsis()
{
    blk("SYNOPSIS:                                                       ");
    blk("------------------------------------                            ");
    blk("  The purpose of the iActuationMokai application is to send     ");
    blk("  commands to the Mokai's front seat controller and to interpret");
    blk("  status messages generated by the front seat.");
}


void showHelpAndExit()
{
    blk("                                                                ");
    blu("=============================================================== ");
    blu("Usage: iActuationMokai file.moos [OPTIONS]                      ");
    blu("=============================================================== ");
    blk("                                                                ");
    showSynopsis();
    blk("                                                                ");
    blk("Options:                                                        ");
    mag("  --alias","=<ProcessName>                                      ");
    blk("      Launch iSpotlight with the given process name rather      ");
    blk("      than iSpotlgiht.                                          ");
    mag("  --example, -e                                                 ");
    blk("      Display example MOOS configuration block.                 ");
    mag("  --help, -h                                                    ");
    blk("      Display this help message.                                ");
    mag("  --interface, -i                                               ");
    blk("      Display MOOS publications and subscriptions.              ");
    blk("                                                                ");
    blk("Note: If argv[2] does not otherwise match a known option,       ");
    blk("      then it will be interpreted as a run alias. This is       ");
    blk("      to support pAntler launching conventions.                 ");
    blk("                                                                ");
    exit(0);
}


void showExampleConfigAndExit()
{
    blk("                                                                ");
    blu("=============================================================== ");
    blu("iActuationMokai Example MOOS Configuration                      ");
    blu("=============================================================== ");
    blk("                                                                ");
    blk("ProcessConfig = iActuationMokai                                 ");
    blk("{                                                               ");
    blk("  AppTick   = 5                                                 ");
    blk("  CommsTick = 5                                                 ");
    blk("  VERBOSE         = true          // Verbose status messages    ");    // bool bVerbose
    blk("  PORT            = /dev/ttyACM0  // Replace with path to port  ");    // string serial_port
    blk("  STREAMING       = true          // Always set to true         ");    // bool streaming
    blk("  BAUDRATE        = 115200        // Should always be 115200    ");    // int baudRate
    blk("  MAX_THRUST      = 100.0         // Normalize to this maximum  ");    // double maxThrust
    blk("  FULL_RUDDER     = 50.0          // Normalize to this maximum  ");    // double fullRudder
    blk("  HBEAT_TO_MOKAI  = 1.0           // Our heartbeat      (Note A)");    // double heartbeatToMokai
    blk("  WDOG_LOCAL_HELM = 1.0           // Helm watchdog      (Note B)");    // double watchdogLocalHelm
    blk("  WDOG_FROM_MOKAI = 1.0           // Frontseat watchdog (Note B)");    // double watchdogFromMokai
    blk("}                                                               ");
    blk("//  NOTE A                                                      ");
    blk("//       Heartbeats are 'I am alive signals' pushed out by      ");
    blk("//       upstream pieces that are expected to publish data      ");
    blk("//       Even when there is no new information, heartbeats will ");
    blk("//       push something, either a repeat of last message or a   ");
    blk("//       benign value.                                          ");
    blk("//  NOTE B                                                      ");
    blk("//       Watchdogs run on the receiving piece to note elapsed   ");
    blk("//       time between receipt of messages from upstream sources.");
    blk("//       If time elapsed is greater than stated, effect is to   ");
    blk("//       shut down the system for safety.                       ");
    blk("                                                                ");
    exit(0);
}


void showInterfaceAndExit()
{
    blk("                                                                ");
    blu("=============================================================== ");
    blu("iActuationMokai INTERFACE                                       ");
    blu("=============================================================== ");
    blk("                                                                ");
    showSynopsis();
    blk("                                                                ");
    blk("SUBSCRIPTIONS:                                                  ");
    blk("------------------------------------                            ");
    blk("  DESIRED_THRUST  double  Helm's decision of speed to travel    ");
    blk("                          converted to percent thrust by the PID");
    blk("  DESIRED_RUDDER  double  Helm's decision for heading to take   ");
    blk("                          converted to ruder angle by the PID   ");
    blk("                                                                ");
    blk("PUBLICATIONS:                                                   ");
    blk("------------------------------------                            ");
    blk("  NONE                                                          ");
    blk("                                                                ");
    exit(0);
}

